<ResourceDictionary 
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:sys="clr-namespace:System;assembly=mscorlib"
    xmlns:basic="clr-namespace:Microsoft.Windows.Controls;assembly=WPFToolkit" 
    xmlns:primitives="clr-namespace:Microsoft.Windows.Controls.Primitives;assembly=WPFToolkit" 
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:local="clr-namespace:BabelIm"
    xmlns:commands="clr-namespace:BabelIm.Commands"
    xmlns:common="clr-namespace:BabelIm.Common"
    xmlns:vc="clr-namespace:BabelIm.ValueConverters"
    xmlns:config="clr-namespace:BabelIm.Configuration;assembly=BabelIm.Configuration"
    xmlns:xmppim="clr-namespace:Framework.Net.Xmpp.InstantMessaging;assembly=Framework.Net.Xmpp.InstantMessaging"
    xmlns:xcontrols="clr-namespace:BabelIm.Controls;assembly=BabelIm.Controls"
    xmlns:vsm="clr-namespace:System.Windows;assembly=WPFToolkit" 
    mc:Ignorable="d"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008">
    
    <!-- Converters -->
    <vc:XmppContactImageConverter x:Key="ImageConverter" />

    <!-- Images -->
    <BitmapImage x:Key="MailIcon" UriSource="pack://application:,,,/Resources/Mail.png" />
	
    <!-- TextBox -->
    <Style TargetType="{x:Type TextBox}" x:Key="LabelTextBox" BasedOn="{StaticResource {x:Type TextBox}}">
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Padding" Value="0" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBox}">
                    <Grid>
                        <vsm:VisualStateManager.VisualStateGroups>
                            <vsm:VisualStateGroup x:Name="CommonStates">
                                <vsm:VisualState x:Name="Normal" />
                                <vsm:VisualState x:Name="MouseOver" />
                                <vsm:VisualState x:Name="Disabled" />
                                <vsm:VisualState x:Name="ReadOnly" />
                            </vsm:VisualStateGroup>
                            <vsm:VisualStateGroup x:Name="FocusedStates">
                                <vsm:VisualState x:Name="Focused">
                                    <Storyboard>
                                        <ObjectAnimationUsingKeyFrames Duration="00:00:00.001" Storyboard.TargetName="border" Storyboard.TargetProperty="(UIElement.Visibility)">
                                            <DiscreteObjectKeyFrame KeyTime="0" Value="{x:Static Visibility.Visible}" />
                                        </ObjectAnimationUsingKeyFrames>
                                    </Storyboard>
                                </vsm:VisualState>
                                <vsm:VisualState x:Name="Unfocused" />
                            </vsm:VisualStateGroup>
                        </vsm:VisualStateManager.VisualStateGroups>
                        <ScrollViewer x:Name="PART_ContentHost" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                        <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="1,1,1,1" OpacityMask="{DynamicResource FocusMask}" Visibility="Collapsed" x:Name="border" />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--ExpandableMenu-->
    <Style x:Key="ExpandableMenu" TargetType="{x:Type Expander}">
        <Setter Property="Foreground" Value="{DynamicResource TextBrush}" />
        <Setter Property="Background" Value="{x:Null}" />
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="VerticalContentAlignment" Value="Stretch" />
        <Setter Property="BorderBrush" Value="#00FFFFFF" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Expander}">
                    <ControlTemplate.Resources>
                        <ControlTemplate x:Key="ExpanderUpHeaderTemplate" TargetType="{x:Type ToggleButton}">
                            <Border Padding="{TemplateBinding Padding}">
                                <Grid SnapsToDevicePixels="False" Background="Transparent">
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="19" />
                                        <ColumnDefinition Width="*" />
                                    </Grid.ColumnDefinitions>
                                    <Grid Width="16" Height="16">
                                        <Grid.RowDefinitions>
                                            <RowDefinition Height="*" />
                                        </Grid.RowDefinitions>
                                        <Path 
                                             StrokeThickness="2" 
                                             HorizontalAlignment="Center" 
                                             x:Name="arrow" 
                                             VerticalAlignment="Center" 
                                             SnapsToDevicePixels="false" 
                                             Data="M 1,1.5 L 4.5,5 L 8,1.5" 
                                             Grid.RowSpan="1" 
                                             RenderTransformOrigin="0.5,0.5" 
                                             Stroke="{DynamicResource TextBrush}">
                                            <Path.RenderTransform>
                                                <TransformGroup>
                                                    <ScaleTransform ScaleX="1" ScaleY="1" />
                                                </TransformGroup>
                                            </Path.RenderTransform>
                                        </Path>
                                    </Grid>
                                    <ContentPresenter HorizontalAlignment="Left" Margin="4,0,0,0" VerticalAlignment="Center" SnapsToDevicePixels="True" Grid.Column="1" RecognizesAccessKey="True" />
                                </Grid>
                            </Border>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsChecked" Value="True">
                                    <Setter Property="RenderTransform" TargetName="arrow">
                                        <Setter.Value>
                                            <TransformGroup>
                                                <ScaleTransform ScaleX="1" ScaleY="-1" />
                                            </TransformGroup>
                                        </Setter.Value>
                                    </Setter>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </ControlTemplate.Resources>
                    <Border SnapsToDevicePixels="true" 
                            CornerRadius="0" 
                            x:Name="ExpanderBorder" 
                            Background="#00A7A6A6">
                        <DockPanel>
                            <ToggleButton 
                                x:Name="HeaderSite" 
                                Margin="1" 
                                MinHeight="0" 
                                MinWidth="0" 
                                Template="{StaticResource ExpanderUpHeaderTemplate}" 
                                Content="{TemplateBinding Header}" 
                                ContentTemplate="{TemplateBinding HeaderTemplate}" 
                                ContentTemplateSelector="{TemplateBinding HeaderTemplateSelector}" 
                                FontFamily="{TemplateBinding FontFamily}" 
                                FontSize="{TemplateBinding FontSize}" 
                                FontStretch="{TemplateBinding FontStretch}" 
                                FontStyle="{TemplateBinding FontStyle}" 
                                FontWeight="{TemplateBinding FontWeight}" 
                                Foreground="{TemplateBinding Foreground}" 
                                HorizontalAlignment="Center"
                                HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" 
                                Padding="{TemplateBinding Padding}" 
                                VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" 
                                IsChecked="{Binding Path=IsExpanded, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" 
                                DockPanel.Dock="Top" Background="#FF000000" 
                                BorderBrush="{TemplateBinding BorderBrush}" Opacity="1" />

                            <Border
                                BorderBrush="{TemplateBinding BorderBrush}" 
                                BorderThickness="{TemplateBinding BorderThickness}">
                                <ContentPresenter 
                                    x:Name="ExpandSite" 
                                    HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
                                    Margin="{TemplateBinding Padding}" 
                                    VerticalAlignment="{TemplateBinding VerticalContentAlignment}" 
                                    Focusable="false" 
                                    Visibility="Collapsed" 
                                />
                            </Border>
                        </DockPanel>
                    </Border>
                    <ControlTemplate.Triggers>
                        <EventTrigger RoutedEvent="UIElement.MouseEnter" SourceName="ExpanderBorder">
                            <BeginStoryboard>
                                <Storyboard>
                                    <DoubleAnimationUsingKeyFrames 
                                        BeginTime="00:00:00" 
                                        Storyboard.TargetName="HeaderSite" 
                                        Storyboard.TargetProperty="(UIElement.Opacity)">
                                        <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="0"/>
                                        <SplineDoubleKeyFrame KeyTime="00:00:00.5000000" Value="1"/>
                                    </DoubleAnimationUsingKeyFrames>
                                </Storyboard>
                            </BeginStoryboard>
                        </EventTrigger>
                        
                        <EventTrigger RoutedEvent="UIElement.MouseLeave" SourceName="ExpanderBorder">
                            <BeginStoryboard>
                                <Storyboard>
                                    <DoubleAnimationUsingKeyFrames 
                                        BeginTime="00:00:00" 
                                        Storyboard.TargetName="HeaderSite" 
                                        Storyboard.TargetProperty="(UIElement.Opacity)">
                                        <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="1"/>
                                        <SplineDoubleKeyFrame KeyTime="00:00:00.5000000" Value="0"/>
                                    </DoubleAnimationUsingKeyFrames>
                                </Storyboard>
                            </BeginStoryboard>
                        </EventTrigger>

                        <Trigger Property="IsExpanded" Value="true">
                            <Setter Property="Visibility" TargetName="ExpandSite" Value="Visible" />
                        </Trigger>
                        <Trigger Property="ExpandDirection" Value="Up">
                            <Setter Property="DockPanel.Dock" TargetName="ExpandSite" Value="Top" />
                            <Setter Property="DockPanel.Dock" TargetName="HeaderSite" Value="Bottom" />
                            <Setter Property="Template" TargetName="HeaderSite" Value="{StaticResource ExpanderUpHeaderTemplate}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Opacity" TargetName="ExpandSite" Value="0.5" />
                            <Setter Property="Opacity" TargetName="HeaderSite" Value="0.5" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- AvatarImage -->
    <Style x:Key="{x:Type xcontrols:AvatarImage}" TargetType="{x:Type xcontrols:AvatarImage}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type xcontrols:AvatarImage}">
                    <Grid x:Name="RootElement">
						<Border>
							<Border BorderBrush="White" Background="White" BorderThickness="3">
								<Image Source="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Image}" />
							</Border>
                        </Border>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

	<!-- Chat TabItem Header -->
	<DataTemplate x:Key="ChatTabItemHeader" DataType="{x:Type TabItem}">
		<StackPanel Orientation="Horizontal">
            <Image x:Name="StatusImage" Width="16" Height="16" />
			<ContentPresenter Content="{Binding RelativeSource={RelativeSource AncestorType={x:Type TabItem}}, Path=Header}"/>
		</StackPanel>
        <DataTemplate.Triggers>
            <DataTrigger 
        		Binding="{Binding RelativeSource={RelativeSource AncestorType={x:Type TabItem}}, Path=Content.DataContext.Contact.Presence.PresenceStatus}" 
            	Value="Available">
                <Setter TargetName="StatusImage" Property="Source" Value="{StaticResource AvailableStatusIcon}" />
            </DataTrigger>
            <DataTrigger 
        		Binding="{Binding RelativeSource={RelativeSource AncestorType={x:Type TabItem}}, Path=Content.DataContext.Contact.Presence.PresenceStatus}" 
            	Value="Away">
                <Setter TargetName="StatusImage" Property="Source" Value="{DynamicResource AwayStatusIcon}" />
            </DataTrigger>
            <DataTrigger 
        		Binding="{Binding RelativeSource={RelativeSource AncestorType={x:Type TabItem}}, Path=Content.DataContext.Contact.Presence.PresenceStatus}"
            	Value="Idle">
                <Setter TargetName="StatusImage" Property="Source" Value="{DynamicResource IdleStatusIcon}" />
            </DataTrigger>
            <DataTrigger 
        		Binding="{Binding RelativeSource={RelativeSource AncestorType={x:Type TabItem}}, Path=Content.DataContext.Contact.Presence.PresenceStatus}" 
            	Value="Busy">
                <Setter TargetName="StatusImage" Property="Source" Value="{DynamicResource BusyStatusIcon}" />
            </DataTrigger>
            <DataTrigger 
        		Binding="{Binding RelativeSource={RelativeSource AncestorType={x:Type TabItem}}, Path=Content.DataContext.Contact.Presence.PresenceStatus}" 
            	Value="Offline">
                <Setter TargetName="StatusImage" Property="Source" Value="{DynamicResource OfflineStatusIcon}" />
            </DataTrigger>
            <DataTrigger 
        		Binding="{Binding RelativeSource={RelativeSource AncestorType={x:Type TabItem}}, Path=Content.DataContext.HasUnreadMessages}" 
            	Value="True">
                <Setter TargetName="StatusImage" Property="Source" Value="{DynamicResource NewMessageStatusIcon}" />
            </DataTrigger>
        </DataTemplate.Triggers>
	</DataTemplate>	
	
    <!-- Chat TabItem -->
    <Style x:Key="ChatTabItem" TargetType="{x:Type TabItem}">
        <Setter Property="Foreground" Value="{DynamicResource TextBrush}" />
        <Setter Property="Padding" Value="6,1,6,1" />
        <Setter Property="BorderBrush" Value="{DynamicResource SecondaryBrush}" />
        <Setter Property="Background" Value="{DynamicResource PrimaryBrush}" />
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="VerticalContentAlignment" Value="Stretch" />
        <Setter Property="Header" Value="{Binding Content.DataContext.HeaderInfo}" />
    	<Setter Property="HeaderTemplate" Value="{StaticResource ChatTabItemHeader}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TabItem}">
                    <Grid SnapsToDevicePixels="true">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="*" />
                        </Grid.RowDefinitions>
                        <Border Grid.RowSpan="1" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="1,1,1,0" CornerRadius="0,0,0,0" x:Name="Background" Opacity="0.65">
                            <Border.Background>
                                <LinearGradientBrush EndPoint="0.5,1.546" StartPoint="0.5,0">
                                    <GradientStop Color="{DynamicResource PrimaryColor}" Offset="0.344" />
                                    <GradientStop Color="{DynamicResource SecondaryColor}" Offset="1" />
                                </LinearGradientBrush>
                            </Border.Background>
                        </Border>
                        <Border x:Name="BdSelected" CornerRadius="0,0,0,0" Visibility="Collapsed" Margin="-2,-2,-2,-6" Background="{TemplateBinding Background}">
                            <Border CornerRadius="0,0,0,0" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="1,1,1,0" Visibility="Collapsed" x:Name="borderSelected" Margin="0,0,0,5" />
                        </Border>
                        <ContentPresenter 
                            HorizontalAlignment="{Binding Path=HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" 
                            x:Name="Content" 
                            VerticalAlignment="{Binding Path=VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" 
                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" 
                            ContentSource="Header" 
                            RecognizesAccessKey="True" 
                            Grid.RowSpan="1"
                            Margin="{TemplateBinding Padding}" 
                        />
                        <Border BorderBrush="{x:Null}" CornerRadius="0,0,0,0" x:Name="Disabled" Grid.RowSpan="1" Background="#8CFFFFFF" Visibility="Collapsed" Margin="-2,-2,-2,-2" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <DataTrigger Binding="{Binding Content.DataContext.HasUnreadMessages}" Value="True">
                            <Setter Property="FontWeight" Value="Bold" />
                        </DataTrigger>
                        <DataTrigger Binding="{Binding Content.DataContext.HasUnreadMessages}" Value="False">
                            <Setter Property="FontWeight" Value="Normal" />
                        </DataTrigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Opacity" TargetName="BdSelected" Value="0.8" />
                        </Trigger>
                        <Trigger Property="IsSelected" Value="true">
                            <Setter Property="Panel.ZIndex" Value="1" />
                            <Setter Property="Visibility" TargetName="Background" Value="Collapsed" />
                            <Setter Property="Visibility" TargetName="BdSelected" Value="Visible" />
                            <Setter Property="Visibility" TargetName="borderSelected" Value="Visible" />
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected" Value="false" />
                                <Condition Property="IsMouseOver" Value="true" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" TargetName="Background">
                                <Setter.Value>
                                    <LinearGradientBrush EndPoint="0.5,1.546" StartPoint="0.5,0">
                                        <GradientStop Color="{DynamicResource PrimaryColor}" Offset="0" />
                                        <GradientStop Color="{DynamicResource SecondaryColor}" Offset="0.621" />
                                    </LinearGradientBrush>
                                </Setter.Value>
                            </Setter>
                        </MultiTrigger>
                        <Trigger Property="TabStripPlacement" Value="Bottom">
                            <Setter Property="BorderThickness" TargetName="BdSelected" Value="1,0,1,1" />
                            <Setter Property="CornerRadius" TargetName="BdSelected" Value="0,0,0,0" />
                            <Setter Property="CornerRadius" TargetName="borderSelected" Value="0,0,0,0" />
                            <Setter Property="CornerRadius" TargetName="Background" Value="0,0,0,0" />
                            <Setter Property="BorderThickness" TargetName="Background" Value="1,0,1,1" />
                            <Setter Property="Margin" TargetName="Disabled" Value="0,0,0,0" />
                            <Setter Property="CornerRadius" TargetName="Disabled" Value="0,0,0,0" />
                            <Setter Property="Visibility" TargetName="Disabled" Value="Collapsed" />
                        </Trigger>
                        <Trigger Property="TabStripPlacement" Value="Left">
                            <Setter Property="BorderThickness" TargetName="BdSelected" Value="1,1,0,1" />
                            <Setter Property="CornerRadius" TargetName="BdSelected" Value="0,0,0,0" />
                            <Setter Property="CornerRadius" TargetName="borderSelected" Value="0,0,0,0" />
                            <Setter Property="CornerRadius" TargetName="Background" Value="0,0,0,0" />
                            <Setter Property="BorderThickness" TargetName="Background" Value="1,1,0,1" />
                            <Setter Property="Margin" TargetName="Disabled" Value="0,0,0,0" />
                            <Setter Property="CornerRadius" TargetName="Disabled" Value="0,0,0,0" />
                            <Setter Property="Visibility" TargetName="Disabled" Value="Collapsed" />
                        </Trigger>
                        <Trigger Property="TabStripPlacement" Value="Right">
                            <Setter Property="BorderThickness" TargetName="BdSelected" Value="0,1,1,1" />
                            <Setter Property="CornerRadius" TargetName="BdSelected" Value="0,0,0,0" />
                            <Setter Property="CornerRadius" TargetName="borderSelected" Value="0,0,0,0" />
                            <Setter Property="CornerRadius" TargetName="Background" Value="0,0,0,0" />
                            <Setter Property="BorderThickness" TargetName="Background" Value="0,1,1,1" />
                            <Setter Property="Margin" TargetName="Disabled" Value="0,0,0,0" />
                            <Setter Property="CornerRadius" TargetName="Disabled" Value="0,0,0,0" />
                            <Setter Property="Visibility" TargetName="Disabled" Value="Collapsed" />
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected" Value="true" />
                                <Condition Property="TabStripPlacement" Value="Top" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Visibility" TargetName="Background" Value="Hidden" />
                            <Setter Property="Visibility" TargetName="BdSelected" Value="Visible" />
                            <Setter Property="Visibility" TargetName="borderSelected" Value="Visible" />
                            <Setter Property="Margin" TargetName="BdSelected" Value="-2,0,-2,-6" />
                            <Setter Property="Margin" TargetName="Disabled" Value="-2,0,-2,-2" />
                            <Setter Property="Visibility" TargetName="Disabled" Value="Collapsed" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected" Value="true" />
                                <Condition Property="TabStripPlacement" Value="Bottom" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Margin" Value="-2,-1,-2,-2" />
                            <Setter Property="Margin" TargetName="Content" Value="6,1,6,1" />
                            <Setter Property="Visibility" TargetName="BdSelected" Value="Visible" />
                            <Setter Property="Visibility" TargetName="borderSelected" Value="Visible" />
                            <Setter Property="Visibility" TargetName="Background" Value="Collapsed" />
                            <Setter Property="BorderThickness" TargetName="borderSelected" Value="1,0,1,1" />
                            <Setter Property="CornerRadius" TargetName="BdSelected" Value="0,0,0,0" />
                            <Setter Property="Margin" TargetName="BdSelected" Value="-2,-6,-2,0" />
                            <Setter Property="CornerRadius" TargetName="borderSelected" Value="0,0,0,0" />
                            <Setter Property="Margin" TargetName="borderSelected" Value="0,5,0,0" />
                            <Setter Property="Margin" TargetName="Disabled" Value="-2,-2,-2,0" />
                            <Setter Property="CornerRadius" TargetName="Disabled" Value="0,0,0,0" />
                            <Setter Property="Visibility" TargetName="Disabled" Value="Collapsed" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected" Value="true" />
                                <Condition Property="TabStripPlacement" Value="Left" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Margin" Value="-2,-2,-1,-2" />
                            <Setter Property="Margin" TargetName="Content" Value="6,1,6,1" />
                            <Setter Property="Visibility" TargetName="Background" Value="Collapsed" />
                            <Setter Property="Visibility" TargetName="BdSelected" Value="Visible" />
                            <Setter Property="Visibility" TargetName="borderSelected" Value="Visible" />
                            <Setter Property="BorderThickness" TargetName="borderSelected" Value="1,1,0,1" />
                            <Setter Property="CornerRadius" TargetName="BdSelected" Value="0,0,0,0" />
                            <Setter Property="Margin" TargetName="BdSelected" Value="0,-2,-6,-2" />
                            <Setter Property="CornerRadius" TargetName="borderSelected" Value="0,0,0,0" />
                            <Setter Property="Margin" TargetName="borderSelected" Value="0,0,6,0" />
                            <Setter Property="CornerRadius" TargetName="Disabled" Value="0,0,0,0" />
                            <Setter Property="Margin" TargetName="Disabled" Value="0,-2,-2,-2" />
                            <Setter Property="Visibility" TargetName="Disabled" Value="Collapsed" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected" Value="true" />
                                <Condition Property="TabStripPlacement" Value="Right" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Margin" Value="-1,-2,-2,-2" />
                            <Setter Property="Margin" TargetName="Content" Value="6,1,6,1" />
                            <Setter Property="Visibility" TargetName="Background" Value="Hidden" />
                            <Setter Property="Visibility" TargetName="BdSelected" Value="Visible" />
                            <Setter Property="Visibility" TargetName="borderSelected" Value="Visible" />
                            <Setter Property="BorderThickness" TargetName="borderSelected" Value="0,1,1,1" />
                            <Setter Property="CornerRadius" TargetName="BdSelected" Value="0,0,0,0" />
                            <Setter Property="Margin" TargetName="BdSelected" Value="-6,-2,0,-2" />
                            <Setter Property="Margin" TargetName="borderSelected" Value="6,0,0,0" />
                            <Setter Property="CornerRadius" TargetName="borderSelected" Value="0,0,0,0" />
                            <Setter Property="CornerRadius" TargetName="Disabled" Value="0,0,0,0" />
                            <Setter Property="Margin" TargetName="Disabled" Value="-2,-2,0,-2" />
                            <Setter Property="Visibility" TargetName="Disabled" Value="Collapsed" />
                        </MultiTrigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Visibility" TargetName="Disabled" Value="Visible" />
                            <Setter Property="Margin" TargetName="Disabled" Value="0,0,0,0" />
                            <Setter Property="CornerRadius" TargetName="Disabled" Value="0,0,0,0" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="IsSelected" Value="False" />
    </Style>
	
    <!-- 
    Close button style
    http://code.msdn.microsoft.com/KobushCode/Release/ProjectReleases.aspx?ReleaseId=392 
    -->
    <Style x:Key="CloseButtonStyle" BasedOn="{StaticResource {x:Type Button}}" TargetType="{x:Type Button}">
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Padding" Value="4"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid>
                        <Border SnapsToDevicePixels="true" x:Name="Chrome" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="2" Opacity="0" />
                        <ContentPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" RecognizesAccessKey="True"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Opacity" TargetName="Chrome" Value="1"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Opacity" TargetName="Chrome" Value="1"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="#ADADAD"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    <!-- Contact Templates -->
    <DataTemplate DataType="{x:Type xmppim:XmppContact}">
        <Grid x:Name="Layout">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="58" />
                <ColumnDefinition Width="*" />
            </Grid.ColumnDefinitions>
            <Grid HorizontalAlignment="Left" VerticalAlignment="Top" Width="58" Height="58">
                <xcontrols:AvatarImage Width="48" Height="48" Image="{Binding Path=Resource.Avatar, Mode=OneWay, Converter={StaticResource ImageConverter}}" />
            </Grid>
            <StackPanel Grid.Column="1" HorizontalAlignment="Left" VerticalAlignment="Center">
                <TextBox x:Name="ScreenName"
                         Style="{StaticResource LabelTextBox}" 
                         Text="{Binding Path=DisplayName, Mode=TwoWay}" 
                         FontWeight="Bold" 
                         FontSize="14" 
                         VerticalAlignment="Bottom" 
                         HorizontalAlignment="Left" 
                         Cursor="Hand" />
                <TextBlock x:Name="StatusText" 
                           Text="{Binding Path=Presence.StatusMessage}" 
                           FontSize="10" 
                           TextWrapping="Wrap" 
                           Margin="0,0,5,0" />
                <TextBlock x:Name="PresenceText" Text="{Binding Path=Presence.PresenceStatus}" FontSize="10" FontWeight="Bold" Margin="0,0,3.5,0" />
            </StackPanel>
        </Grid>
    </DataTemplate>

    <DataTemplate x:Key="BigContactTemplate" DataType="{x:Type xmppim:XmppContact}">
        <Grid x:Name="Layout" Margin="5,10,5,10">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="100" />
                <ColumnDefinition Width="22" />
                <ColumnDefinition Width="*" />
            </Grid.ColumnDefinitions>
            <xcontrols:AvatarImage 
                Grid.Column="0"
                x:Name="AvatarImage"
                Width="96" 
                Height="96" 
                Image="{Binding Path=Resource.Avatar, Mode=OneWay, Converter={StaticResource ImageConverter}}"
                HorizontalAlignment="Left"
            />
            <Image Grid.Column="1" x:Name="StatusImage" Width="16" Height="16" VerticalAlignment="Center" HorizontalAlignment="Left" />
            <StackPanel Grid.Column="2" HorizontalAlignment="Left" VerticalAlignment="Top" >
                <TextBox x:Name="ScreenName"
                         Style="{StaticResource LabelTextBox}" 
                         Text="{Binding Path=DisplayName, Mode=TwoWay}" 
                         FontWeight="Bold" 
                         FontSize="14" 
                         HorizontalAlignment="Left" 
                         HorizontalContentAlignment="Stretch"
                         Cursor="Hand" />
                <TextBlock x:Name="StatusText" 
                           Text="{Binding Path=Presence.StatusMessage}" 
                           FontSize="10" 
                           TextWrapping="Wrap" 
                           Margin="0,0,5,0" />
            </StackPanel>
        </Grid>
        <DataTemplate.Triggers>
            <DataTrigger Binding="{Binding Path=Presence.PresenceStatus}" Value="Available">
                <Setter TargetName="StatusImage" Property="Source" Value="{DynamicResource AvailableStatusIcon}" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=Presence.PresenceStatus}" Value="Away">
                <Setter TargetName="StatusImage" Property="Source" Value="{DynamicResource AwayStatusIcon}" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=Presence.PresenceStatus}" Value="Idle">
                <Setter TargetName="StatusImage" Property="Source" Value="{DynamicResource IdleStatusIcon}" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=Presence.PresenceStatus}" Value="Busy">
                <Setter TargetName="StatusImage" Property="Source" Value="{DynamicResource BusyStatusIcon}" />
            </DataTrigger>
        </DataTemplate.Triggers>
    </DataTemplate>
    
    <DataTemplate x:Key="NormalContactTemplate" DataType="{x:Type xmppim:XmppContact}">
        <Grid x:Name="Layout" Margin="5,10,5,10">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="50" />
                <ColumnDefinition Width="22" />
                <ColumnDefinition Width="*" />
            </Grid.ColumnDefinitions>
            <xcontrols:AvatarImage 
                Grid.Column="0"
                x:Name="AvatarImage"
                Width="48" 
                Height="48" 
                Image="{Binding Path=Resource.Avatar, Mode=OneWay, Converter={StaticResource ImageConverter}}"
                HorizontalAlignment="Left"
            />
            <Image Grid.Column="1" x:Name="StatusImage" Width="16" Height="16" VerticalAlignment="Center" HorizontalAlignment="Left" />
            <StackPanel Grid.Column="2" HorizontalAlignment="Left" VerticalAlignment="Top" >
                <TextBox x:Name="ScreenName"
                         Style="{StaticResource LabelTextBox}" 
                         Text="{Binding Path=DisplayName, Mode=TwoWay}" 
                         FontWeight="Bold" 
                         FontSize="14" 
                         HorizontalAlignment="Left" 
                         HorizontalContentAlignment="Stretch"
                         Cursor="Hand" />
                <TextBlock x:Name="StatusText" 
                           Text="{Binding Path=Presence.StatusMessage}" 
                           FontSize="10" 
                           TextWrapping="NoWrap" 
                           Margin="0,0,5,0" />
            </StackPanel>
        </Grid>
        <DataTemplate.Triggers>
            <DataTrigger Binding="{Binding Path=Presence.PresenceStatus}" Value="Available">
                <Setter TargetName="StatusImage" Property="Source" Value="{DynamicResource AvailableStatusIcon}" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=Presence.PresenceStatus}" Value="Away">
                <Setter TargetName="StatusImage" Property="Source" Value="{DynamicResource AwayStatusIcon}" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=Presence.PresenceStatus}" Value="Idle">
                <Setter TargetName="StatusImage" Property="Source" Value="{DynamicResource IdleStatusIcon}" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=Presence.PresenceStatus}" Value="Busy">
                <Setter TargetName="StatusImage" Property="Source" Value="{DynamicResource BusyStatusIcon}" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=Presence.PresenceStatus}" Value="Offline">
                <Setter TargetName="StatusImage" Property="Source" Value="{DynamicResource OfflineStatusIcon}" />
            </DataTrigger>
        </DataTemplate.Triggers>
    </DataTemplate>

    <DataTemplate x:Key="SmallContactTemplate" DataType="{x:Type xmppim:XmppContact}">
        <Grid x:Name="Layout" Margin="5,10,5,10">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="34" />
                <ColumnDefinition Width="22" />
                <ColumnDefinition Width="*" />
            </Grid.ColumnDefinitions>
            <xcontrols:AvatarImage 
                Grid.Column="0"
                x:Name="AvatarImage"
                Width="32" 
                Height="32" 
                Image="{Binding Path=Resource.Avatar, Mode=OneWay, Converter={StaticResource ImageConverter}}"
                HorizontalAlignment="Left"
            />
            <Image Grid.Column="1" x:Name="StatusImage" Width="16" Height="16" VerticalAlignment="Center" HorizontalAlignment="Left" />
            <StackPanel Grid.Column="2" HorizontalAlignment="Left" VerticalAlignment="Top" >
                <TextBox x:Name="ScreenName"
                         Style="{StaticResource LabelTextBox}" 
                         Text="{Binding Path=DisplayName, Mode=TwoWay}" 
                         FontWeight="Bold" 
                         FontSize="14" 
                         HorizontalAlignment="Left" 
                         HorizontalContentAlignment="Stretch"
                         Cursor="Hand" />
                <TextBlock x:Name="StatusText" 
                           Text="{Binding Path=Presence.StatusMessage}" 
                           FontSize="10" 
                           TextWrapping="NoWrap" 
                           Margin="0,0,5,0" />
            </StackPanel>
        </Grid>
        <DataTemplate.Triggers>
            <DataTrigger Binding="{Binding Path=Presence.PresenceStatus}" Value="Available">
                <Setter TargetName="StatusImage" Property="Source" Value="{StaticResource AvailableStatusIcon}" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=Presence.PresenceStatus}" Value="Away">
                <Setter TargetName="StatusImage" Property="Source" Value="{DynamicResource AwayStatusIcon}" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=Presence.PresenceStatus}" Value="Idle">
                <Setter TargetName="StatusImage" Property="Source" Value="{DynamicResource IdleStatusIcon}" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=Presence.PresenceStatus}" Value="Busy">
                <Setter TargetName="StatusImage" Property="Source" Value="{DynamicResource BusyStatusIcon}" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=Presence.PresenceStatus}" Value="Offline">
                <Setter TargetName="StatusImage" Property="Source" Value="{DynamicResource OfflineStatusIcon}" />
            </DataTrigger>
        </DataTemplate.Triggers>
    </DataTemplate>

    <DataTemplate x:Key="StatusOnlyContactTemplate" DataType="{x:Type xmppim:XmppContact}">
        <Grid x:Name="Layout" Margin="5,10,5,10">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="22" />
                <ColumnDefinition Width="*" />
            </Grid.ColumnDefinitions>
            <Image Grid.Column="0" x:Name="StatusImage" Width="16" Height="16" VerticalAlignment="Center" HorizontalAlignment="Left" />
            <StackPanel Grid.Column="1" HorizontalAlignment="Left" VerticalAlignment="Top" >
                <TextBox x:Name="ScreenName"
                         Style="{StaticResource LabelTextBox}" 
                         Text="{Binding Path=DisplayName, Mode=TwoWay}" 
                         FontWeight="Bold" 
                         FontSize="14" 
                         HorizontalAlignment="Left" 
                         HorizontalContentAlignment="Stretch"
                         Cursor="Hand" />
            </StackPanel>
        </Grid>
        <DataTemplate.Triggers>
            <DataTrigger Binding="{Binding Path=Presence.PresenceStatus}" Value="Available">
                <Setter TargetName="StatusImage" Property="Source" Value="{StaticResource AvailableStatusIcon}" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=Presence.PresenceStatus}" Value="Away">
                <Setter TargetName="StatusImage" Property="Source" Value="{DynamicResource AwayStatusIcon}" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=Presence.PresenceStatus}" Value="Idle">
                <Setter TargetName="StatusImage" Property="Source" Value="{DynamicResource IdleStatusIcon}" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=Presence.PresenceStatus}" Value="Busy">
                <Setter TargetName="StatusImage" Property="Source" Value="{DynamicResource BusyStatusIcon}" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=Presence.PresenceStatus}" Value="Offline">
                <Setter TargetName="StatusImage" Property="Source" Value="{DynamicResource OfflineStatusIcon}" />
            </DataTrigger>
        </DataTemplate.Triggers>
    </DataTemplate>

    <!-- Contact List Style -->
    <Style x:Key="ContactListStyle" TargetType="{x:Type ListBox}" BasedOn="{StaticResource {x:Type ListBox}}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListBox}">
                    <DockPanel LastChildFill="True">
                        <Slider DockPanel.Dock="Bottom" 
                                x:Name="TemplateSelector" 
                                Minimum="1" 
                                Maximum="4" 
                                Value="3" 
                                IsSnapToTickEnabled="True" 
                                HorizontalContentAlignment="Stretch" />
                        <ScrollViewer Padding="{TemplateBinding Padding}" Focusable="false" Margin="4,4,4,4" Foreground="{DynamicResource TextBrush}" x:Name="ScrollViewer">
                            <ItemsPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                        </ScrollViewer>
                    </DockPanel>
                    <ControlTemplate.Triggers>
                        <Trigger SourceName="TemplateSelector" Property="RangeBase.Value" Value="4">
                            <Setter Property="ItemsControl.ItemTemplate" Value="{StaticResource BigContactTemplate}" />
                        </Trigger>
                        <Trigger SourceName="TemplateSelector" Property="RangeBase.Value" Value="3">
                            <Setter Property="ItemsControl.ItemTemplate" Value="{StaticResource NormalContactTemplate}" />
                        </Trigger>
                        <Trigger SourceName="TemplateSelector" Property="RangeBase.Value" Value="2">
                            <Setter Property="ItemsControl.ItemTemplate" Value="{StaticResource SmallContactTemplate}" />
                        </Trigger>
                        <Trigger SourceName="TemplateSelector" Property="RangeBase.Value" Value="1">
                            <Setter Property="ItemsControl.ItemTemplate" Value="{StaticResource StatusOnlyContactTemplate}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Emoticon -->
    <DataTemplate DataType="{x:Type common:Emoticon}">
        <Image 
            Width="16" 
            Height="16" 
            Source="{Binding Path=Image, Mode=OneWay, Converter={StaticResource ImageConverter}}" 
        />
    </DataTemplate>
    
	<!-- Personal Eventing and Activity Templates -->
	
	<!-- Message Event -->
    <DataTemplate DataType="{x:Type xmppim:XmppMessageEvent}">
        <Grid x:Name="Layout" Margin="5,5,5,5">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="50" />
                <ColumnDefinition Width="*" />
            </Grid.ColumnDefinitions>
            <Image Grid.Column="0" x:Name="StatusImage" Width="48" Height="48" VerticalAlignment="Center" HorizontalAlignment="Left" Source="{DynamicResource MailIcon}" />
            <StackPanel Grid.Column="1" HorizontalAlignment="Left" VerticalAlignment="Center">
                <TextBlock x:Name="MessageSubject"
                         Text="{Binding Path=Message.Subject}" 
                         FontWeight="Bold" 
                         FontSize="14" 
                         VerticalAlignment="Bottom" 
                         HorizontalAlignment="Left" />
                <TextBlock x:Name="MessageBody" 
                           Text="{Binding Path=Message.Body}" 
                           FontSize="10" 
                           TextWrapping="Wrap" 
                           Margin="0,0,5,0" />
            </StackPanel>
        </Grid>
    </DataTemplate>

	<!-- User Mood -->
    <DataTemplate DataType="{x:Type xmppim:XmppUserMoodEvent}">
        <Grid x:Name="Layout" Margin="5,5,5,5">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="50" />
                <ColumnDefinition Width="*" />
            </Grid.ColumnDefinitions>
            <xcontrols:AvatarImage 
                Grid.Column="0" 
                Width="48" 
                Height="48" 
                Margin="0,0,4,0"
                Image="{Binding Path=User.Resource.Avatar, Mode=OneWay, Converter={StaticResource ImageConverter}}" 
            />
            <StackPanel Grid.Column="1" HorizontalAlignment="Left" VerticalAlignment="Center">
                <TextBlock x:Name="UserName"
                         Text="{Binding Path=User.DisplayName}" 
                         FontWeight="Bold" 
                         FontSize="12" 
                         VerticalAlignment="Bottom" 
                         HorizontalAlignment="Left" />
                <TextBlock x:Name="MoodTitle"
                         Text="{Binding Path=Mood}" 
                         FontWeight="Bold" 
                         FontSize="14" 
                         VerticalAlignment="Bottom" 
                         HorizontalAlignment="Left" />
                <TextBlock x:Name="MoodText" 
                           Text="{Binding Path=Text}" 
                           FontSize="10" 
                           TextWrapping="Wrap" 
                           Margin="0,0,5,0" />
            </StackPanel>
        </Grid>
    </DataTemplate>

	<!-- User Tune -->
    <DataTemplate DataType="{x:Type xmppim:XmppUserTuneEvent}">
        <Grid x:Name="Layout" Margin="5,5,5,5">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="50" />
                <ColumnDefinition Width="22" />
                <ColumnDefinition Width="*" />
            </Grid.ColumnDefinitions>
            <xcontrols:AvatarImage 
                Grid.Column="0"
                x:Name="AvatarImage"
                Width="48" 
                Height="48" 
                Image="{Binding Path=User.Resource.Avatar, Mode=OneWay, Converter={StaticResource ImageConverter}}"
                HorizontalAlignment="Left"
            />
            <Image Grid.Column="1" x:Name="StatusImage" Width="16" Height="16" VerticalAlignment="Center" HorizontalAlignment="Left" Source="{DynamicResource MusicStatusIcon}" />
            <StackPanel Grid.Column="2" HorizontalAlignment="Left" VerticalAlignment="Center">
                <WrapPanel>
                    <TextBlock x:Name="UserName"
                         Text="{Binding Path=User.DisplayName, Mode=OneWay}" 
                         FontSize="10" 
                         HorizontalAlignment="Left" 
                    />
                    <TextBlock x:Name="ListeningLiteral"
                         Text=" is listening" 
                         FontSize="10" 
                         HorizontalAlignment="Left" 
                    />
                </WrapPanel>
                <TextBlock x:Name="TuneArtist"
                         Text="{Binding Path=Artist, Mode=OneWay}" 
                         FontSize="10" 
                         HorizontalAlignment="Left" 
                />                
                <TextBlock x:Name="TuneTitle"
                     Text="{Binding Path=Title, Mode=OneWay}" 
                     FontWeight="Bold" 
                     FontSize="10" 
                     HorizontalAlignment="Left" 
                />
                <WrapPanel>
                    <TextBlock x:Name="TuneSource"
                     Text="{Binding Path=Source, Mode=OneWay}" 
                     FontSize="10" 
                     HorizontalAlignment="Left" 
                    />
                    <TextBlock x:Name="TrackTitle"
                     Text="{Binding Path=Track, Mode=OneWay, TargetNullValue={x:Static sys:String.Empty}, StringFormat=-{0}}" 
                     FontSize="10" 
                     HorizontalAlignment="Left" 
                    />
                </WrapPanel>
            </StackPanel>
        </Grid>
    </DataTemplate>
    
    <!-- Gateway Service Template -->
    <DataTemplate DataType="{x:Type xmppim:XmppGatewayService}">
        <Grid x:Name="Layout" Margin="5,10,5,10">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="50" />
                <ColumnDefinition Width="*" />
            </Grid.ColumnDefinitions>
            <Image x:Name="GatewayIcon" Grid.Column="0" Width="48" Height="48" />
            <StackPanel Grid.Column="1" HorizontalAlignment="Left" VerticalAlignment="Center">
                <TextBlock x:Name="ServiceName"
                         Text="{Binding Path=Name}" 
                         FontWeight="Bold" 
                         FontSize="10" 
                         VerticalAlignment="Bottom" 
                         HorizontalAlignment="Left" />
                <TextBlock x:Name="ServiceCategory" 
                           Text="{Binding Path=Category}" 
                           FontSize="10" />
                <TextBlock x:Name="ServiceId" 
                           Text="{Binding Path=ServiceId}" 
                           FontSize="10" />
            </StackPanel>
        </Grid>
        <DataTemplate.Triggers>
            <DataTrigger Binding="{Binding Path=Type}" Value="Aim">
                <Setter TargetName="GatewayIcon" Property="Source" Value="{StaticResource AimTransportServiceIcon}" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=Type}" Value="GTalk">
                <Setter TargetName="GatewayIcon" Property="Source" Value="{DynamicResource GTalkTransportServiceIcon}" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=Type}" Value="Icq">
                <Setter TargetName="GatewayIcon" Property="Source" Value="{DynamicResource IcqTransportServiceIcon}" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=Type}" Value="Msn">
                <Setter TargetName="GatewayIcon" Property="Source" Value="{DynamicResource MsnTransportServiceIcon}" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=Type}" Value="Xmpp">
                <Setter TargetName="GatewayIcon" Property="Source" Value="{DynamicResource XmppTransportServiceIcon}" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=Type}" Value="Yahoo">
                <Setter TargetName="GatewayIcon" Property="Source" Value="{DynamicResource YahooTransportServiceIcon}" />
            </DataTrigger>
        </DataTemplate.Triggers>
    </DataTemplate>
	
	<!-- XMPP Service Template -->
    <DataTemplate DataType="{x:Type xmppim:XmppService}">
        <Grid x:Name="Layout" Margin="5,5,5,5">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="50" />
                <ColumnDefinition Width="*" />
            </Grid.ColumnDefinitions>
            <Image Grid.Column="0" Width="48" Height="48" Source="{DynamicResource XmppTransportServiceIcon}" />
            <StackPanel Grid.Column="1" HorizontalAlignment="Left" VerticalAlignment="Center">
                <TextBlock x:Name="ServiceName"
                         Text="{Binding Path=Name}" 
                         FontWeight="Bold" 
                         FontSize="10" 
                         VerticalAlignment="Bottom" 
                         HorizontalAlignment="Left" />
                <TextBlock x:Name="ServiceCategory" 
                           Text="{Binding Path=Category}" 
                           FontSize="10" />
                <TextBlock x:Name="SeviceId" 
                           Text="{Binding Path=ServiceId}" 
                           FontSize="10" />
            </StackPanel>
        </Grid>
    </DataTemplate>

</ResourceDictionary>